#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const fs = require("fs");
const path = require("path");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5002');
app.set('port', port);

/**
 * Create HTTP server.
 */

async function runSqlFile(filePath) {
  try {
    const rawSql = fs.readFileSync(filePath, 'utf8');

    // Rensa bort kommentarer och dela upp på semikolon följt av radslut
    const statements = rawSql
      .split(/;\s*[\r\n]+/) // Dela på semikolon + radslut
      .map(s => s.trim())
      .filter(s => s.length && !s.startsWith('--') && !s.startsWith('/*'));

    for (const statement of statements) {
      try {
        await db.sequelize.query(statement);
      } catch (err) {
        console.error('Fel vid körning av:', statement);
        console.error(err.message);
      }
    }

    console.log('SQL-filen kördes klart!');
  } catch (err) {
    console.error('Kunde inte läsa/köra SQL-filen:', err.message);
  }
}

var server = http.createServer(app);
const FORCE_SYNC = false;
// const FORCE_SYNC = true; // OBS! Denna kommer att radera all data i databasen
const db = require('../models/');
db.sequelize
.query('SET FOREIGN_KEY_CHECKS = 0') //disabeling foreign key checks
.then(() => {
  return db.sequelize.sync({force: FORCE_SYNC});
})
.then(async () => {
  await db.sequelize.query('SET FOREIGN_KEY_CHECKS = 1'); //enabling foreign key checks
  
  console.log('Databasen är synkad');

  if (FORCE_SYNC) {
      const sqlPath = path.join(__dirname, "../sql/initDB.sql");

      if (fs.existsSync(sqlPath)) {
        await runSqlFile(sqlPath);
      } else {
        console.warn('initDB.sql hittades inte:', sqlPath);
      }
    }

  app.listen(port, () => {
    console.log(`Servern kör på port ${port}`);
  });
}).catch((e) => {
  console.error(e);
});


server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

